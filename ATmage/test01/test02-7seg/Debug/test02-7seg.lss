
test02-7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be1  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  00000f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c3  00000000  00000000  0000185f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000440  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000458  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	92 d0       	rcall	.+292    	; 0x1e8 <main>
  c4:	a5 c0       	rjmp	.+330    	; 0x210 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <seg>:
    _delay_ms(__delay_t);
}

void seg(int sel, uint8_t c)
{
	PORTB != 0X0F;
  c8:	28 b3       	in	r18, 0x18	; 24
	PORTB &= ~(1 << (3-sel));
  ca:	28 b3       	in	r18, 0x18	; 24
  cc:	43 e0       	ldi	r20, 0x03	; 3
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	48 1b       	sub	r20, r24
  d2:	59 0b       	sbc	r21, r25
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <seg+0x16>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	4a 95       	dec	r20
  e0:	e2 f7       	brpl	.-8      	; 0xda <seg+0x12>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	88 bb       	out	0x18, r24	; 24
	PORTA = c;
  e8:	6b bb       	out	0x1b, r22	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	9c e9       	ldi	r25, 0x9C	; 156
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <seg+0x26>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <seg+0x2c>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <FND_4>:
	_delay_ms(10);
}

void FND_4(char *inf) // segment Image 배열
{
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	8c 01       	movw	r16, r24
	for(int i = 0; i < 4; i++)
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	07 c0       	rjmp	.+14     	; 0x116 <FND_4+0x1e>
	{
		seg(i, *(inf+i));
 108:	f8 01       	movw	r30, r16
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	60 81       	ld	r22, Z
 110:	ce 01       	movw	r24, r28
 112:	da df       	rcall	.-76     	; 0xc8 <seg>
	_delay_ms(10);
}

void FND_4(char *inf) // segment Image 배열
{
	for(int i = 0; i < 4; i++)
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c4 30       	cpi	r28, 0x04	; 4
 118:	d1 05       	cpc	r29, r1
 11a:	b4 f3       	brlt	.-20     	; 0x108 <FND_4+0x10>
	{
		seg(i, *(inf+i));
	}
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <Trans>:

char* Trans(int num) // 10진 정수 ==> 16진수 문자열 : 56506 ==> 0xDCBA 
                       //         ==> 16진수 segment Image 배열
{
	int n1 = num % 16;          // A (10) : 문자가 아닌 숫자
 126:	9c 01       	movw	r18, r24
 128:	2f 70       	andi	r18, 0x0F	; 15
 12a:	30 78       	andi	r19, 0x80	; 128
 12c:	33 23       	and	r19, r19
 12e:	34 f4       	brge	.+12     	; 0x13c <Trans+0x16>
 130:	21 50       	subi	r18, 0x01	; 1
 132:	31 09       	sbc	r19, r1
 134:	20 6f       	ori	r18, 0xF0	; 240
 136:	3f 6f       	ori	r19, 0xFF	; 255
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	b9 01       	movw	r22, r18
	int n2 = (num / 16) % 16;   // B (11)
 13e:	9c 01       	movw	r18, r24
 140:	99 23       	and	r25, r25
 142:	14 f4       	brge	.+4      	; 0x148 <Trans+0x22>
 144:	21 5f       	subi	r18, 0xF1	; 241
 146:	3f 4f       	sbci	r19, 0xFF	; 255
 148:	35 95       	asr	r19
 14a:	27 95       	ror	r18
 14c:	35 95       	asr	r19
 14e:	27 95       	ror	r18
 150:	35 95       	asr	r19
 152:	27 95       	ror	r18
 154:	35 95       	asr	r19
 156:	27 95       	ror	r18
 158:	2f 70       	andi	r18, 0x0F	; 15
 15a:	30 78       	andi	r19, 0x80	; 128
 15c:	33 23       	and	r19, r19
 15e:	34 f4       	brge	.+12     	; 0x16c <Trans+0x46>
 160:	21 50       	subi	r18, 0x01	; 1
 162:	31 09       	sbc	r19, r1
 164:	20 6f       	ori	r18, 0xF0	; 240
 166:	3f 6f       	ori	r19, 0xFF	; 255
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	f9 01       	movw	r30, r18
	int n3 = (num / 256 ) % 16; // C (12)
 16e:	ac 01       	movw	r20, r24
 170:	99 23       	and	r25, r25
 172:	14 f4       	brge	.+4      	; 0x178 <Trans+0x52>
 174:	41 50       	subi	r20, 0x01	; 1
 176:	5f 4f       	sbci	r21, 0xFF	; 255
 178:	25 2f       	mov	r18, r21
 17a:	35 2f       	mov	r19, r21
 17c:	33 0f       	add	r19, r19
 17e:	33 0b       	sbc	r19, r19
 180:	2f 70       	andi	r18, 0x0F	; 15
 182:	30 78       	andi	r19, 0x80	; 128
 184:	33 23       	and	r19, r19
 186:	34 f4       	brge	.+12     	; 0x194 <Trans+0x6e>
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	31 09       	sbc	r19, r1
 18c:	20 6f       	ori	r18, 0xF0	; 240
 18e:	3f 6f       	ori	r19, 0xFF	; 255
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
	int n4 = (num / 4096);      // D (13)
 194:	ac 01       	movw	r20, r24
 196:	99 23       	and	r25, r25
 198:	14 f4       	brge	.+4      	; 0x19e <Trans+0x78>
 19a:	41 50       	subi	r20, 0x01	; 1
 19c:	50 4f       	sbci	r21, 0xF0	; 240
 19e:	85 2f       	mov	r24, r21
 1a0:	85 95       	asr	r24
 1a2:	85 95       	asr	r24
 1a4:	85 95       	asr	r24
 1a6:	85 95       	asr	r24
 1a8:	95 2f       	mov	r25, r21
 1aa:	99 0f       	add	r25, r25
 1ac:	99 0b       	sbc	r25, r25
	arr[0] = digit[n1];
 1ae:	db 01       	movw	r26, r22
 1b0:	a0 50       	subi	r26, 0x00	; 0
 1b2:	bf 4f       	sbci	r27, 0xFF	; 255
 1b4:	4c 91       	ld	r20, X
 1b6:	a0 e1       	ldi	r26, 0x10	; 16
 1b8:	b1 e0       	ldi	r27, 0x01	; 1
 1ba:	4c 93       	st	X, r20
	arr[1] = digit[n2];
 1bc:	e0 50       	subi	r30, 0x00	; 0
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	40 81       	ld	r20, Z
 1c2:	11 96       	adiw	r26, 0x01	; 1
 1c4:	4c 93       	st	X, r20
 1c6:	11 97       	sbiw	r26, 0x01	; 1
	arr[2] = digit[n3];
 1c8:	f9 01       	movw	r30, r18
 1ca:	e0 50       	subi	r30, 0x00	; 0
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	20 81       	ld	r18, Z
 1d0:	12 96       	adiw	r26, 0x02	; 2
 1d2:	2c 93       	st	X, r18
 1d4:	12 97       	sbiw	r26, 0x02	; 2
    arr[3] = digit[n4];
 1d6:	fc 01       	movw	r30, r24
 1d8:	e0 50       	subi	r30, 0x00	; 0
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	80 81       	ld	r24, Z
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	8c 93       	st	X, r24
 1e2:	13 97       	sbiw	r26, 0x03	; 3
	
	//FND_4(arr);
	return arr;
}
 1e4:	cd 01       	movw	r24, r26
 1e6:	08 95       	ret

000001e8 <main>:
int main(void)
{
    uint8_t digit[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67,0x77, 0x7C, 0x58, 0x5E, 0x79, 0x71};
		int i, j = 0;
		DDRC = 0x07;
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	84 bb       	out	0x14, r24	; 20
		DDRA = 0xFF; //세그먼트 제어 핀 8개를 출력으로 설정
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	8a bb       	out	0x1a, r24	; 26
		DDRB = 0x0F;
 1f0:	8f e0       	ldi	r24, 0x0F	; 15
 1f2:	87 bb       	out	0x17, r24	; 23
	return arr;
}
int main(void)
{
    uint8_t digit[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67,0x77, 0x7C, 0x58, 0x5E, 0x79, 0x71};
		int i, j = 0;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
		 //자릿수 선택 핀 4개를 출력으로 설정
    while (1) 
    {
		//TogglePinC(2,__delay_t);
		//LED(&PORTC, 1);
	 FND_4(Trans(j++));
 1f8:	ec 01       	movw	r28, r24
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	94 df       	rcall	.-216    	; 0x126 <Trans>
 1fe:	7c df       	rcall	.-264    	; 0xf8 <FND_4>
 200:	8f e3       	ldi	r24, 0x3F	; 63
 202:	9c e9       	ldi	r25, 0x9C	; 156
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <main+0x1c>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x22>
 20a:	00 00       	nop
 20c:	ce 01       	movw	r24, r28
 20e:	f4 cf       	rjmp	.-24     	; 0x1f8 <main+0x10>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
